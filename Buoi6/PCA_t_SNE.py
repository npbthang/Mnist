import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.datasets import fetch_openml
import mlflow
import os
import time
from datetime import datetime
from mlflow.tracking import MlflowClient

# H√†m k·∫øt n·ªëi MLflow
def input_mlflow():
    DAGSHUB_MLFLOW_URI = "https://dagshub.com/npbthang/Mnist.mlflow"
    mlflow.set_tracking_uri(DAGSHUB_MLFLOW_URI)
    os.environ["MLFLOW_TRACKING_USERNAME"] = "npbthang"
    os.environ["MLFLOW_TRACKING_PASSWORD"] = "6ad5ad3cc6d4b2f9efb9f28b1aa13618d2ce7357"
    mlflow.set_experiment("MNIST_PCA_t_SNE")
    st.session_state['mlflow_url'] = DAGSHUB_MLFLOW_URI

# H√†m t·∫£i d·ªØ li·ªáu MNIST t·ª´ OpenML
@st.cache_data
def load_mnist_data():
    X, y = fetch_openml('mnist_784', version=1, return_X_y=True, as_frame=False)
    X = X.astype(np.float32) / 255.0
    return X, y

# Tab hi·ªÉn th·ªã d·ªØ li·ªáu
def data():
    st.header("üìò D·ªØ Li·ªáu MNIST t·ª´ OpenML")
    
    if "data_loaded" not in st.session_state:
        st.session_state.data_loaded = False
        st.session_state.X = None
        st.session_state.y = None

    if st.button("‚¨áÔ∏è T·∫£i d·ªØ li·ªáu t·ª´ OpenML"):
        with st.spinner("‚è≥ ƒêang t·∫£i d·ªØ li·ªáu MNIST t·ª´ OpenML..."):
            X, y = load_mnist_data()
            st.session_state.X = X
            st.session_state.y = y
            st.session_state.data_loaded = True
            st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")

    if st.session_state.data_loaded:
        X, y = st.session_state.X, st.session_state.y
        st.write("""
            **Th√¥ng tin t·∫≠p d·ªØ li·ªáu MNIST:**
            - T·ªïng s·ªë m·∫´u: {}
            - K√≠ch th∆∞·ªõc m·ªói ·∫£nh: 28 √ó 28 pixels (784 ƒë·∫∑c tr∆∞ng)
            - S·ªë l·ªõp: 10 (ch·ªØ s·ªë t·ª´ 0-9)
        """.format(X.shape[0]))

        st.subheader("M·ªôt s·ªë h√¨nh ·∫£nh m·∫´u")
        n_samples = 10
        fig, axes = plt.subplots(2, 5, figsize=(12, 5))
        indices = np.random.choice(X.shape[0], n_samples, replace=False)
        for i, idx in enumerate(indices):
            row = i // 5
            col = i % 5
            axes[row, col].imshow(X[idx].reshape(28, 28), cmap='gray')
            axes[row, col].set_title(f"Label: {y[idx]}")
            axes[row, col].axis("off")
        plt.tight_layout()
        st.pyplot(fig)
    else:
        st.info("‚ÑπÔ∏è Nh·∫•n n√∫t 'T·∫£i d·ªØ li·ªáu t·ª´ OpenML' ƒë·ªÉ t·∫£i v√† hi·ªÉn th·ªã d·ªØ li·ªáu.")

# H√†m gi·∫£i th√≠ch PCA
def explain_pca():
    st.markdown("## üß† PCA - Ph√¢n t√≠ch Th√†nh ph·∫ßn Ch√≠nh")

    st.markdown("""
    **PCA (Principal Component Analysis)** l√† m·ªôt k·ªπ thu·∫≠t gi·∫£m chi·ªÅu tuy·∫øn t√≠nh gi√∫p chuy·ªÉn d·ªØ li·ªáu t·ª´ kh√¥ng gian nhi·ªÅu chi·ªÅu sang kh√¥ng gian √≠t chi·ªÅu h∆°n, ƒë·ªìng th·ªùi gi·ªØ l·∫°i ph·∫ßn l·ªõn th√¥ng tin quan tr·ªçng (ph∆∞∆°ng sai).  
    - **M·ª•c ti√™u**: T√¨m c√°c h∆∞·ªõng ch√≠nh (principal components) m√† d·ªØ li·ªáu bi·∫øn thi√™n nhi·ªÅu nh·∫•t, sau ƒë√≥ chi·∫øu d·ªØ li·ªáu l√™n c√°c h∆∞·ªõng n√†y.
    - **·ª®ng d·ª•ng**: Tr·ª±c quan h√≥a d·ªØ li·ªáu, gi·∫£m k√≠ch th∆∞·ªõc d·ªØ li·ªáu ƒë·ªÉ tƒÉng t·ªëc c√°c thu·∫≠t to√°n h·ªçc m√°y.
    """)

    st.markdown("### üîπ **PCA ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?**")
    st.markdown("""
    H√£y t∆∞·ªüng t∆∞·ª£ng b·∫°n c√≥ d·ªØ li·ªáu 2D v·ªõi c√°c ƒëi·ªÉm n·∫±m r·∫£i r√°c nh∆∞ng ch·ªß y·∫øu ph√¢n b·ªë theo m·ªôt h∆∞·ªõng ch√©o. PCA s·∫Ω t√¨m h∆∞·ªõng ch√≠nh m√† d·ªØ li·ªáu bi·∫øn thi√™n m·∫°nh nh·∫•t v√† bi·∫øn ƒë·ªïi d·ªØ li·ªáu sang h·ªá t·ªça ƒë·ªô m·ªõi d·ª±a tr√™n h∆∞·ªõng ƒë√≥.
    """)

    np.random.seed(42)
    x = np.random.rand(100) * 10
    y = x * 0.8 + np.random.randn(100) * 2
    X = np.column_stack((x, y))

    fig, ax = plt.subplots()
    ax.scatter(X[:, 0], X[:, 1], color="blue", alpha=0.5, label="D·ªØ li·ªáu ban ƒë·∫ßu")
    ax.set_xlabel("X1")
    ax.set_ylabel("X2")
    ax.legend()
    st.pyplot(fig)

    st.markdown("""
    **H√¨nh tr√™n**: D·ªØ li·ªáu ph√¢n b·ªë ch·ªß y·∫øu theo h∆∞·ªõng ch√©o. PCA s·∫Ω t√¨m ra h∆∞·ªõng n√†y ƒë·ªÉ gi·∫£m chi·ªÅu t·ª´ 2D xu·ªëng 1D.
    """)

    st.markdown("### üîπ **C√°c b∆∞·ªõc th·ª±c hi·ªán PCA**")
    st.markdown("""
    1. **Chu·∫©n h√≥a d·ªØ li·ªáu (tr·ª´ trung b√¨nh)**  
       - T√≠nh trung b√¨nh c·ªßa t·ª´ng chi·ªÅu:  
         $$ \\mu = \\frac{1}{n} \\sum_{i=1}^{n} x_i $$  
       - D·ªãch chuy·ªÉn d·ªØ li·ªáu v·ªÅ g·ªëc t·ªça ƒë·ªô:  
         $$ X_{\\text{norm}} = X - \\mu $$  
       - **M·ª•c ƒë√≠ch**: ƒê·∫£m b·∫£o trung t√¢m d·ªØ li·ªáu n·∫±m t·∫°i $(0, 0)$, gi√∫p ph√¢n t√≠ch kh√¥ng b·ªã l·ªách.

    2. **T√≠nh ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai**  
       - C√¥ng th·ª©c:  
         $$ C = \\frac{1}{n-1} X_{\\text{norm}}^T X_{\\text{norm}} $$  
       - **√ù nghƒ©a**:  
         - $C_{ii}$ (ƒë∆∞·ªùng ch√©o): Ph∆∞∆°ng sai c·ªßa chi·ªÅu $i$.  
         - $C_{ij}$ (ngo√†i ƒë∆∞·ªùng ch√©o): Hi·ªáp ph∆∞∆°ng sai gi·ªØa chi·ªÅu $i$ v√† $j$, ƒëo m·ª©c ƒë·ªô t∆∞∆°ng quan.

    3. **T√¨m tr·ªã ri√™ng v√† vector ri√™ng**  
       - Gi·∫£i ph∆∞∆°ng tr√¨nh:  
         $$ C v = \\lambda v $$  
       - Trong ƒë√≥:  
         - $\\lambda$: Tr·ªã ri√™ng, bi·ªÉu th·ªã ƒë·ªô l·ªõn ph∆∞∆°ng sai theo h∆∞·ªõng t∆∞∆°ng ·ª©ng.  
         - $v$: Vector ri√™ng, bi·ªÉu th·ªã h∆∞·ªõng c·ªßa th√†nh ph·∫ßn ch√≠nh.

    4. **Ch·ªçn th√†nh ph·∫ßn ch√≠nh**  
       - S·∫Øp x·∫øp c√°c tr·ªã ri√™ng t·ª´ l·ªõn ƒë·∫øn nh·ªè, ch·ªçn $k$ tr·ªã ri√™ng l·ªõn nh·∫•t v√† vector ri√™ng t∆∞∆°ng ·ª©ng ƒë·ªÉ t·∫°o ma tr·∫≠n $U_k$:  
         $$ U_k = [v_1, v_2, ..., v_k] $$

    5. **Chi·∫øu d·ªØ li·ªáu l√™n kh√¥ng gian m·ªõi**  
       - C√¥ng th·ª©c:  
         $$ X_{\\text{new}} = X_{\\text{norm}} U_k $$  
       - K·∫øt qu·∫£ l√† d·ªØ li·ªáu m·ªõi v·ªõi s·ªë chi·ªÅu gi·∫£m xu·ªëng $k$.
    """)

    X_centered = X - np.mean(X, axis=0)
    cov_matrix = np.cov(X_centered.T)
    eigenvalues, eigenvectors = np.linalg.eig(cov_matrix)
    fig, ax = plt.subplots()
    ax.scatter(X[:, 0], X[:, 1], color="blue", alpha=0.5, label="D·ªØ li·ªáu ban ƒë·∫ßu")
    origin = np.mean(X, axis=0)
    for i in range(2):
        ax.arrow(origin[0], origin[1], eigenvectors[0, i] * 3, eigenvectors[1, i] * 3,
                 head_width=0.3, head_length=0.3, color="red", label=f"Tr·ª•c {i+1}")
    ax.set_xlabel("X1")
    ax.set_ylabel("X2")
    ax.legend()
    st.pyplot(fig)

    st.markdown("""
    **H√¨nh tr√™n**: C√°c m≈©i t√™n ƒë·ªè l√† c√°c tr·ª•c ch√≠nh m√† PCA t√¨m ra. Tr·ª•c d√†i h∆°n (Tr·ª•c 1) l√† h∆∞·ªõng c√≥ ph∆∞∆°ng sai l·ªõn nh·∫•t.
    """)

    st.markdown("### ‚úÖ **∆Øu ƒëi·ªÉm c·ªßa PCA**")
    st.markdown("""
    - Gi·∫£m chi·ªÅu hi·ªáu qu·∫£, gi·ªØ ƒë∆∞·ª£c th√¥ng tin ch√≠nh (ph∆∞∆°ng sai l·ªõn).
    - TƒÉng t·ªëc x·ª≠ l√Ω cho c√°c m√¥ h√¨nh h·ªçc m√°y.
    - Lo·∫°i b·ªè nhi·ªÖu b·∫±ng c√°ch b·ªè qua c√°c chi·ªÅu c√≥ ph∆∞∆°ng sai nh·ªè.
    """)

    st.markdown("### ‚ùå **Nh∆∞·ª£c ƒëi·ªÉm c·ªßa PCA**")
    st.markdown("""
    - Ch·ªâ hi·ªáu qu·∫£ v·ªõi d·ªØ li·ªáu c√≥ c·∫•u tr√∫c tuy·∫øn t√≠nh.
    - C√°c th√†nh ph·∫ßn ch√≠nh kh√¥ng c√≤n √Ω nghƒ©a tr·ª±c quan nh∆∞ ƒë·∫∑c tr∆∞ng g·ªëc.
    - Nh·∫°y c·∫£m v·ªõi d·ªØ li·ªáu ch∆∞a chu·∫©n h√≥a (c·∫ßn scale tr∆∞·ªõc n·∫øu c√°c chi·ªÅu c√≥ ƒë∆°n v·ªã kh√°c nhau).
    """)
    
def explain_tsne():
    st.markdown("## üåå t-SNE - Gi·∫£m chi·ªÅu Phi tuy·∫øn")

    st.markdown("""
    **t-SNE (t-Distributed Stochastic Neighbor Embedding)** l√† m·ªôt k·ªπ thu·∫≠t gi·∫£m chi·ªÅu phi tuy·∫øn, t·∫≠p trung v√†o vi·ªác b·∫£o to√†n c·∫•u tr√∫c c·ª•c b·ªô c·ªßa d·ªØ li·ªáu (kho·∫£ng c√°ch gi·ªØa c√°c ƒëi·ªÉm g·∫ßn nhau).  
    - **M·ª•c ti√™u**: Chuy·ªÉn d·ªØ li·ªáu t·ª´ kh√¥ng gian cao chi·ªÅu (v√≠ d·ª•: 784 chi·ªÅu c·ªßa MNIST) xu·ªëng 2D ho·∫∑c 3D ƒë·ªÉ tr·ª±c quan h√≥a.
    - **·ª®ng d·ª•ng**: Ch·ªß y·∫øu d√πng ƒë·ªÉ kh√°m ph√° v√† hi·ªÉn th·ªã d·ªØ li·ªáu ph·ª©c t·∫°p.
    """)

    st.markdown("### üîπ **Tham s·ªë quan tr·ªçng trong t-SNE**")
    st.markdown("""
    - **`n_components`**:  
      - **√ù nghƒ©a**: S·ªë chi·ªÅu m√† d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c gi·∫£m xu·ªëng (th∆∞·ªùng l√† 2 ho·∫∑c 3 ƒë·ªÉ tr·ª±c quan h√≥a).  
      - **Gi√° tr·ªã**: M·ªôt s·ªë nguy√™n d∆∞∆°ng (v√≠ d·ª•: 2 cho 2D, 3 cho 3D).  
      - **T√°c ƒë·ªông**:  
        - 2 ho·∫∑c 3: Ph√π h·ª£p ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì tr·ª±c quan.  
        - Kh√¥ng h·ªó tr·ª£ gi√° tr·ªã l·ªõn h∆°n v√¨ t-SNE ch·ªß y·∫øu d√πng cho tr·ª±c quan h√≥a.  
      - **Trong code n√†y**: B·∫°n ch·ªçn t·ª´ 1 ƒë·∫øn 3 ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu d∆∞·ªõi d·∫°ng 1D, 2D, ho·∫∑c 3D.
    """)

    st.markdown("### üîπ **t-SNE ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?**")
    st.markdown("""
    t-SNE kh√¥ng t√¨m c√°c h∆∞·ªõng tuy·∫øn t√≠nh nh∆∞ PCA, m√† c·ªë g·∫Øng gi·ªØ c√°c ƒëi·ªÉm g·∫ßn nhau trong kh√¥ng gian g·ªëc c≈©ng g·∫ßn nhau trong kh√¥ng gian m·ªõi. N√≥ l√†m ƒëi·ªÅu n√†y b·∫±ng c√°ch so s√°nh v√† t·ªëi ∆∞u h√≥a ph√¢n ph·ªëi x√°c su·∫•t gi·ªØa hai kh√¥ng gian.
    """)

    np.random.seed(42)
    cluster1 = np.random.randn(50, 2) + np.array([2, 2])
    cluster2 = np.random.randn(50, 2) + np.array([-2, -2])
    X = np.vstack((cluster1, cluster2))

    fig, ax = plt.subplots()
    ax.scatter(X[:, 0], X[:, 1], c=['blue']*50 + ['orange']*50, alpha=0.5, label="D·ªØ li·ªáu ban ƒë·∫ßu")
    ax.set_xlabel("X1")
    ax.set_ylabel("X2")
    ax.legend(["C·ª•m 1", "C·ª•m 2"])
    st.pyplot(fig)

    st.markdown("""
    **H√¨nh tr√™n**: D·ªØ li·ªáu 2D v·ªõi hai c·ª•m. t-SNE s·∫Ω c·ªë g·∫Øng gi·ªØ hai c·ª•m n√†y t√°ch bi·ªát khi gi·∫£m chi·ªÅu.
    """)

    st.markdown("### üîπ **C√°c b∆∞·ªõc th·ª±c hi·ªán t-SNE**")
    st.markdown("""
    1. **T√≠nh x√°c su·∫•t t∆∞∆°ng ƒë·ªìng trong kh√¥ng gian g·ªëc**  
       - V·ªõi m·ªói c·∫∑p ƒëi·ªÉm $x_i$ v√† $x_j$, t√≠nh x√°c su·∫•t $p_{j|i}$ r·∫±ng $x_j$ l√† h√†ng x√≥m c·ªßa $x_i$:  
         $$ p_{j|i} = \\frac{\\exp(-\\| x_i - x_j \\|^2 / 2\\sigma^2)}{\\sum_{k \\neq i} \\exp(-\\| x_i - x_k \\|^2 / 2\\sigma^2)} $$  
       - $\\sigma$: ƒê·ªô r·ªông c·ªßa ph√¢n ph·ªëi Gaussian, ph·ª• thu·ªôc v√†o s·ªë l∆∞·ª£ng h√†ng x√≥m ƒë∆∞·ª£c xem x√©t.  
       - **√ù nghƒ©a**: C√°c ƒëi·ªÉm g·∫ßn nhau c√≥ x√°c su·∫•t l·ªõn h∆°n.

    2. **T√≠nh x√°c su·∫•t trong kh√¥ng gian m·ªõi**  
       - Trong kh√¥ng gian gi·∫£m chi·ªÅu, d√πng ph√¢n ph·ªëi t-Student ƒë·ªÉ t√≠nh $q_{j|i}$:  
         $$ q_{j|i} = \\frac{(1 + \\| y_i - y_j \\|^2)^{-1}}{\\sum_{k \\neq i} (1 + \\| y_i - y_k \\|^2)^{-1}} $$  
       - **√ù nghƒ©a**: Ph√¢n ph·ªëi t-Student c√≥ ƒëu√¥i d√†i, gi√∫p ph√¢n b·ªë c√°c ƒëi·ªÉm xa nhau h·ª£p l√Ω h∆°n.

    3. **T·ªëi ∆∞u h√≥a s·ª± kh√°c bi·ªát**  
       - ƒêo s·ª± kh√°c bi·ªát gi·ªØa $P$ v√† $Q$ b·∫±ng **KL-divergence**:  
         $$ KL(P||Q) = \\sum_{i \\neq j} p_{ij} \\log \\frac{p_{ij}}{q_{ij}} $$  
       - D√πng gradient descent ƒë·ªÉ ƒëi·ªÅu ch·ªânh t·ªça ƒë·ªô $y_i$ sao cho $KL$ nh·ªè nh·∫•t.
    """)

    st.markdown("### ‚úÖ **∆Øu ƒëi·ªÉm c·ªßa t-SNE**")
    st.markdown("""
    - T·∫°o c√°c c·ª•m d·ªØ li·ªáu r√µ r√†ng, d·ªÖ nh√¨n trong kh√¥ng gian 2D/3D.
    - Ph√π h·ª£p v·ªõi d·ªØ li·ªáu phi tuy·∫øn t√≠nh (PCA kh√¥ng l√†m ƒë∆∞·ª£c).
    - R·∫•t t·ªët ƒë·ªÉ tr·ª±c quan h√≥a d·ªØ li·ªáu ph·ª©c t·∫°p nh∆∞ MNIST.
    """)

    st.markdown("### ‚ùå **Nh∆∞·ª£c ƒëi·ªÉm c·ªßa t-SNE**")
    st.markdown("""
    - T·ªën nhi·ªÅu th·ªùi gian t√≠nh to√°n, ƒë·∫∑c bi·ªát v·ªõi d·ªØ li·ªáu l·ªõn.
    - Nh·∫°y c·∫£m v·ªõi c√°ch thi·∫øt l·∫≠p ban ƒë·∫ßu (c·∫ßn ch·ªçn c·∫©n th·∫≠n).
    - Kh√¥ng b·∫£o to√†n c·∫•u tr√∫c to√†n c·ª•c, ch·ªâ t·∫≠p trung v√†o c·ª•c b·ªô.
    - Kh√¥ng ph√π h·ª£p ƒë·ªÉ gi·∫£m chi·ªÅu cho h·ªçc m√°y (ch·ªâ d√πng ƒë·ªÉ tr·ª±c quan h√≥a).
    """)

# H√†m th·ª±c hi·ªán gi·∫£m chi·ªÅu v√† tr·ª±c quan h√≥a
def dimensionality_reduction():
    st.title("üìâ Gi·∫£m Chi·ªÅu D·ªØ li·ªáu MNIST")

    if "data_loaded" not in st.session_state or not st.session_state.data_loaded:
        st.warning("‚ö† Vui l√≤ng t·∫£i d·ªØ li·ªáu t·ª´ tab 'D·ªØ Li·ªáu' tr∆∞·ªõc khi ti·∫øp t·ª•c!")
        return

    X, y = st.session_state["X"], st.session_state["y"]
    st.write(f"T·ªïng s·ªë m·∫´u: {X.shape[0]}, S·ªë chi·ªÅu ban ƒë·∫ßu: {X.shape[1]}")

    num_samples = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u:", 1000, X.shape[0], 5000, step=1000)
    X_subset, y_subset = X[:num_samples], y[:num_samples]

    method = st.radio("Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu:", ["PCA", "t-SNE"])
    n_components = st.slider("S·ªë chi·ªÅu gi·∫£m xu·ªëng:", 1, 3, 2)

    run_name = st.text_input("üîπ Nh·∫≠p t√™n Run:", "")  # ƒê·ªÉ tr·ªëng ƒë·ªÉ ng∆∞·ªùi d√πng t·ª± nh·∫≠p

    if st.button("üöÄ Ch·∫°y Gi·∫£m Chi·ªÅu"):
        if not run_name:
            st.error("‚ö† Vui l√≤ng nh·∫≠p t√™n Run tr∆∞·ªõc khi ti·∫øp t·ª•c!")
            return

        with st.spinner(f"ƒêang th·ª±c hi·ªán {method}..."):
            # Kh·ªüi t·∫°o thanh tr·∫°ng th√°i
            progress_bar = st.progress(0)
            status_text = st.empty()

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i: B·∫Øt ƒë·∫ßu
            status_text.text("B·∫Øt ƒë·∫ßu qu√° tr√¨nh gi·∫£m chi·ªÅu...")
            progress_bar.progress(0.1)

            input_mlflow()
            with mlflow.start_run(run_name=run_name):
                mlflow.log_param("method", method)
                mlflow.log_param("n_components", n_components)
                mlflow.log_param("num_samples", num_samples)
                mlflow.log_param("original_dim", X.shape[1])

                start_time = time.time()

                if method == "PCA":
                    # Giai ƒëo·∫°n 1: Kh·ªüi t·∫°o PCA
                    status_text.text("Kh·ªüi t·∫°o PCA...")
                    reducer = PCA(n_components=n_components)
                    progress_bar.progress(0.3)

                    # Giai ƒëo·∫°n 2: Fit v√† transform d·ªØ li·ªáu
                    status_text.text("ƒêang gi·∫£m chi·ªÅu d·ªØ li·ªáu v·ªõi PCA...")
                    X_reduced = reducer.fit_transform(X_subset)
                    progress_bar.progress(0.7)
                    #explained_variance_ratio l√† Ph∆∞∆°ng sai 
                    if n_components > 1:
                        explained_variance = np.sum(reducer.explained_variance_ratio_)
                        mlflow.log_metric("explained_variance_ratio", explained_variance)
                else:
                    # Giai ƒëo·∫°n 1: Kh·ªüi t·∫°o t-SNE
                    status_text.text("Kh·ªüi t·∫°o t-SNE...")
                    perplexity = min(30, num_samples - 1)
                    mlflow.log_param("perplexity", perplexity)
                    reducer = TSNE(n_components=n_components, perplexity=perplexity, random_state=42)
                    progress_bar.progress(0.3)

                    # Giai ƒëo·∫°n 2: Fit v√† transform d·ªØ li·ªáu
                    status_text.text("ƒêang gi·∫£m chi·ªÅu d·ªØ li·ªáu v·ªõi t-SNE (c√≥ th·ªÉ l√¢u h∆°n PCA)...")
                    X_reduced = reducer.fit_transform(X_subset)
                    progress_bar.progress(0.7)
                    #kl_divergence l√† m·ªôt th∆∞·ªõc ƒëo s·ª± kh√°c bi·ªát gi·ªØa hai ph√¢n ph·ªëi x√°c su·∫•t, ƒë∆∞·ª£c s·ª≠ d·ª•ng trong t-SNE ƒë·ªÉ t·ªëi ∆∞u h√≥a vi·ªác gi·∫£m chi·ªÅu
                    #l√† m·ªôt th∆∞·ªõc ƒëo s·ª± kh√°c bi·ªát gi·ªØa hai ph√¢n ph·ªëi x√°c su·∫•t, ƒë∆∞·ª£c s·ª≠ d·ª•ng trong t-SNE ƒë·ªÉ t·ªëi ∆∞u h√≥a vi·ªác gi·∫£m chi·ªÅu
                    if hasattr(reducer, "kl_divergence_"):
                        mlflow.log_metric("KL_divergence", reducer.kl_divergence_)

                # Giai ƒëo·∫°n 3: Tr·ª±c quan h√≥a
                status_text.text("ƒêang t·∫°o bi·ªÉu ƒë·ªì tr·ª±c quan...")
                elapsed_time = time.time() - start_time
                mlflow.log_metric("elapsed_time", elapsed_time)

                if n_components == 1:
                    fig = px.line(x=range(len(X_reduced)), y=X_reduced.flatten(), color=y_subset,
                                  title=f"{method} gi·∫£m chi·ªÅu xu·ªëng 1D",
                                  labels={'x': "M·∫´u", 'y': "Gi√° tr·ªã th√†nh ph·∫ßn"})
                elif n_components == 2:
                    fig = px.scatter(x=X_reduced[:, 0], y=X_reduced[:, 1], color=y_subset,
                                     title=f"{method} gi·∫£m chi·ªÅu xu·ªëng 2D",
                                     labels={'x': "Th√†nh ph·∫ßn 1", 'y': "Th√†nh ph·∫ßn 2"})
                else:
                    fig = px.scatter_3d(x=X_reduced[:, 0], y=X_reduced[:, 1], z=X_reduced[:, 2],
                                        color=y_subset,
                                        title=f"{method} gi·∫£m chi·ªÅu xu·ªëng 3D",
                                        labels={'x': "Th√†nh ph·∫ßn 1", 'y': "Th√†nh ph·∫ßn 2", 'z': "Th√†nh ph·∫ßn 3"})
                st.plotly_chart(fig)
                progress_bar.progress(0.9)

                # Giai ƒëo·∫°n 4: L∆∞u d·ªØ li·ªáu v√† ho√†n t·∫•t
                status_text.text("ƒêang l∆∞u d·ªØ li·ªáu v√† ho√†n t·∫•t...")
                os.makedirs("logs", exist_ok=True)
                reduced_data_path = f"logs/{method}_{n_components}D_X_reduced.npy"
                np.save(reduced_data_path, X_reduced)
                mlflow.log_artifact(reduced_data_path)

                # L∆∞u run_name v√†o session_state ƒë·ªÉ d√πng trong tab MLflow
                st.session_state["last_run_name"] = run_name

                progress_bar.progress(1.0)
                status_text.text("Ho√†n th√†nh!")

                st.success(f"‚úÖ Ho√†n th√†nh {method} trong {elapsed_time:.2f} gi√¢y!")
                st.markdown(f"üîó [Xem k·∫øt qu·∫£ tr√™n MLflow]({st.session_state['mlflow_url']})")

# H√†m hi·ªÉn th·ªã th√¥ng tin MLflow Experiments (Hi·ªÉn th·ªã t·∫•t c·∫£ run_name v√† chi ti·∫øt run v·ª´a ch·∫°y)
def show_experiment_selector():
    st.markdown("<h1 style='text-align: center; color: #2E86C1;'> MLflow Experiments </h1>", unsafe_allow_html=True)
    if 'mlflow_url' in st.session_state:
        st.markdown(f"üîó [Truy c·∫≠p MLflow UI]({st.session_state['mlflow_url']})")
    else:
        st.warning("‚ö†Ô∏è URL MLflow ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!")

    input_mlflow()
    experiment_name = "MNIST_PCA_t_SNE"
    experiments = mlflow.search_experiments()
    selected_experiment = next((exp for exp in experiments if exp.name == experiment_name), None)

    if not selected_experiment:
        st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y Experiment '{experiment_name}'!", icon="üö´")
        return

    st.subheader(f"üìå Experiment: {experiment_name}")
    st.write(f"**Experiment ID:** {selected_experiment.experiment_id}")
    st.write(f"**Tr·∫°ng th√°i:** {'üü¢ Active' if selected_experiment.lifecycle_stage == 'active' else 'üî¥ Deleted'}")
    st.write(f"**Artifact Location:** `{selected_experiment.artifact_location}`")

    runs = mlflow.search_runs(experiment_ids=[selected_experiment.experiment_id])

    if runs.empty:
        st.warning("‚ö† Kh√¥ng c√≥ runs n√†o trong experiment n√†y!", icon="üö®")
        return

    # Hi·ªÉn th·ªã t·∫•t c·∫£ run_name d∆∞·ªõi d·∫°ng danh s√°ch ch·ªçn
    st.subheader("üèÉ‚Äç‚ôÇÔ∏è T·∫•t c·∫£ Runs trong Experiment")
    run_info = []
    for _, run in runs.iterrows():
        run_id = run["run_id"]
        run_data = mlflow.get_run(run_id)
        run_name = run_data.info.run_name if run_data.info.run_name else f"Run_{run_id[:8]}"
        run_info.append((run_name, run_id))

    # Lo·∫°i b·ªè tr√πng l·∫∑p trong danh s√°ch run_name ƒë·ªÉ hi·ªÉn th·ªã trong selectbox
    run_name_to_id = dict(run_info)  # T·ª´ ƒëi·ªÉn √°nh x·∫° run_name -> run_id (gi·ªØ run_id cu·ªëi c√πng n·∫øu tr√πng)
    run_names = list(run_name_to_id.keys())  # Danh s√°ch run_name kh√¥ng tr√πng l·∫∑p

    st.write("**Ch·ªçn Run ƒë·ªÉ xem chi ti·∫øt:**")
    selected_run_name = st.selectbox("Danh s√°ch Run Names:", run_names, key="run_selector")

    # T√¨m run t∆∞∆°ng ·ª©ng v·ªõi run_name ƒë∆∞·ª£c ch·ªçn
    selected_run_id = run_name_to_id[selected_run_name]
    selected_run = mlflow.get_run(selected_run_id)

    if selected_run:
        st.markdown(f"<h3 style='color: #28B463;'>üìå Chi ti·∫øt Run ƒê∆∞·ª£c Ch·ªçn: {selected_run_name}</h3>", unsafe_allow_html=True)

        col1, col2 = st.columns([1, 2])
        with col1:
            st.write("#### ‚ÑπÔ∏è Th√¥ng tin c∆° b·∫£n")
            st.info(f"**Run Name:** {selected_run_name}")
            st.info(f"**Run ID:** `{selected_run_id}`")
            st.info(f"**Tr·∫°ng th√°i:** {selected_run.info.status}")
            start_time_ms = selected_run.info.start_time
            if start_time_ms:
                start_time = datetime.fromtimestamp(start_time_ms / 1000).strftime("%Y-%m-%d %H:%M:%S")
            else:
                start_time = "Kh√¥ng c√≥ th√¥ng tin"
            st.info(f"**Th·ªùi gian ch·∫°y:** {start_time}")

        with col2:
            params = selected_run.data.params
            if params:
                st.write("#### ‚öôÔ∏è Parameters")
                with st.container(height=200):
                    st.json(params)

            metrics = selected_run.data.metrics
            if metrics:
                st.write("#### üìä Metrics")
                with st.container(height=200):
                    st.json(metrics)

    # Hi·ªÉn th·ªã chi ti·∫øt run v·ª´a ch·∫°y t·ª´ tab Gi·∫£m Chi·ªÅu (n·∫øu c√≥)
    st.markdown("---")
    if "last_run_name" not in st.session_state or not st.session_state["last_run_name"]:
        st.warning("‚ö† Ch∆∞a c√≥ run n√†o ƒë∆∞·ª£c th·ª±c hi·ªán g·∫ßn ƒë√¢y. Vui l√≤ng ch·∫°y gi·∫£m chi·ªÅu trong tab 'Gi·∫£m Chi·ªÅu' ƒë·ªÉ xem chi ti·∫øt!")
    else:
        last_run_name = st.session_state["last_run_name"]
        st.subheader(f"üìå Chi ti·∫øt Run G·∫ßn ƒê√¢y: {last_run_name}")

        # T√¨m run v·ªõi run_name v·ª´a ch·∫°y
        selected_last_run = None
        for _, run in runs.iterrows():
            run_id = run["run_id"]
            run_data = mlflow.get_run(run_id)
            if run_data.info.run_name == last_run_name:
                selected_last_run = run_data
                selected_last_run_id = run_id
                break

        if selected_last_run:
            col1, col2 = st.columns([1, 2])
            with col1:
                st.write("#### ‚ÑπÔ∏è Th√¥ng tin c∆° b·∫£n")
                st.info(f"**Run Name:** {last_run_name}")
                st.info(f"**Run ID:** `{selected_last_run_id}`")
                st.info(f"**Tr·∫°ng th√°i:** {selected_last_run.info.status}")
                start_time_ms = selected_last_run.info.start_time
                if start_time_ms:
                    start_time = datetime.fromtimestamp(start_time_ms / 1000).strftime("%Y-%m-%d %H:%M:%S")
                else:
                    start_time = "Kh√¥ng c√≥ th√¥ng tin"
                st.info(f"**Th·ªùi gian ch·∫°y:** {start_time}")

            with col2:
                params = selected_last_run.data.params
                if params:
                    st.write("#### ‚öôÔ∏è Parameters")
                    with st.container(height=200):
                        st.json(params)

                metrics = selected_last_run.data.metrics
                if metrics:
                    st.write("#### üìä Metrics")
                    with st.container(height=200):
                        st.json(metrics)
        else:
            st.warning(f"‚ö† Kh√¥ng t√¨m th·∫•y run v·ªõi t√™n '{last_run_name}'. Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c ch·∫°y l·∫°i trong tab 'Gi·∫£m Chi·ªÅu'!")

    st.markdown("---")
    st.markdown("<p style='text-align: center; color: #888;'>Powered by Streamlit & MLflow</p>", unsafe_allow_html=True)

# Giao di·ªán ch√≠nh
def main():
    st.title("üöÄ MNIST Dimensionality Reduction with PCA & t-SNE")
    tabs = st.tabs(["üìò D·ªØ Li·ªáu", "üìò PCA", "üìò t-SNE", "üìâ Gi·∫£m Chi·ªÅu", "üìä MLflow"])

    with tabs[0]:
        data()
    with tabs[1]:
        explain_pca()
    with tabs[2]:
        explain_tsne()
    with tabs[3]:
        dimensionality_reduction()
    with tabs[4]:
        show_experiment_selector()

if __name__ == "__main__":
    main()