import streamlit as st
import pandas as pd
from sklearn.preprocessing import StandardScaler
from scipy.stats import zscore
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from scipy.stats import zscore
from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.metrics import mean_squared_error
import mlflow
import io
from sklearn.model_selection import KFold



import os
from mlflow.tracking import MlflowClient





def mlflow_input():
    st.title(" HU·∫§N LUY·ªÜN M√î H√åNH ")
    # C·∫•u h√¨nh DAGsHub MLflow URI 
    DAGSHUB_MLFLOW_URI = "https://dagshub.com/npbthang/Mnist.mlflow"
    mlflow.set_tracking_uri(DAGSHUB_MLFLOW_URI)
    st.session_state['mlflow_url']=DAGSHUB_MLFLOW_URI
    os.environ["MLFLOW_TRACKING_USERNAME"] = "npbthang"
    os.environ["MLFLOW_TRACKING_PASSWORD"] = "6ad5ad3cc6d4b2f9efb9f28b1aa13618d2ce7357"

    mlflow.set_experiment("Linear_Regression")








import streamlit as st
import pandas as pd

def drop(df):
    st.subheader("üóëÔ∏è X√≥a c·ªôt d·ªØ li·ªáu")
    
    if "df" not in st.session_state:
        st.session_state.df = df  # L∆∞u v√†o session_state n·∫øu ch∆∞a c√≥

    df = st.session_state.df
    columns_to_drop = st.multiselect("üìå Ch·ªçn c·ªôt mu·ªën x√≥a:", df.columns.tolist())

    # Danh s√°ch c√°c c·ªôt b·∫Øt bu·ªôc ph·∫£i x√≥a
    mandatory_columns = ["Cabin", "Name", "Ticket"]
    
    # Ki·ªÉm tra xem c√°c c·ªôt b·∫Øt bu·ªôc c√≥ trong dataframe kh√¥ng
    missing_columns = [col for col in mandatory_columns if col not in df.columns]
    if missing_columns:
        st.warning(f"‚ö†Ô∏è C√°c c·ªôt sau kh√¥ng c√≥ trong dataframe: {', '.join(missing_columns)}")
    
    # Th√™m c√°c c·ªôt b·∫Øt bu·ªôc v√†o danh s√°ch c√°c c·ªôt s·∫Ω b·ªã x√≥a
    columns_to_drop.extend([col for col in mandatory_columns if col in df.columns])
    
    # Lo·∫°i b·ªè c√°c ph·∫ßn t·ª≠ tr√πng l·∫∑p trong danh s√°ch columns_to_drop
    columns_to_drop = list(set(columns_to_drop))
    
    if st.button("üöÄ X√≥a c·ªôt ƒë√£ ch·ªçn"):
        if columns_to_drop:
            df = df.drop(columns=columns_to_drop)  # T·∫°o b·∫£n sao thay v√¨ inplace=True
            st.session_state.df = df  # C·∫≠p nh·∫≠t session_state
            st.success(f"‚úÖ ƒê√£ x√≥a c·ªôt: {', '.join(columns_to_drop)}")
            st.dataframe(df.head())
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt c·ªôt ƒë·ªÉ x√≥a!")

    return df

def choose_label(df):
    st.subheader("üéØ Ch·ªçn c·ªôt d·ª± ƒëo√°n (label)")

    if "target_column" not in st.session_state:
        st.session_state.target_column = None
    
    selected_label = st.selectbox("üìå Ch·ªçn c·ªôt d·ª± ƒëo√°n", df.columns, 
                                  index=df.columns.get_loc(st.session_state.target_column) if st.session_state.target_column else 0)

    X, y = df.drop(columns=[selected_label]), df[selected_label]  # M·∫∑c ƒë·ªãnh
    
    if st.button("‚úÖ X√°c nh·∫≠n Label"):
        st.session_state.target_column = selected_label
        X, y = df.drop(columns=[selected_label]), df[selected_label]
        st.success(f"‚úÖ ƒê√£ ch·ªçn c·ªôt: **{selected_label}**")
    
    return X, y

def train_test_size():
    if "df" not in st.session_state:
        st.error("‚ùå D·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c t·∫£i l√™n!")
        st.stop()
    
    df = st.session_state.df  # L·∫•y d·ªØ li·ªáu t·ª´ session_stat
    X, y = choose_label(df)
    
    st.subheader("üìä Chia d·ªØ li·ªáu Train - Validation - Test")   
    
    test_size = st.slider("üìå Ch·ªçn % d·ªØ li·ªáu Test", 10, 50, 20)
    remaining_size = 100 - test_size
    val_size = st.slider("üìå Ch·ªçn % d·ªØ li·ªáu Validation (trong ph·∫ßn Train)", 0, 50, 15)

    st.write(f"üìå **T·ª∑ l·ªá ph√¢n chia:** Test={test_size}%, Validation={val_size}%, Train={remaining_size - val_size}%")

    

    if st.button("‚úÖ X√°c nh·∫≠n Chia"):
        # st.write("‚è≥ ƒêang chia d·ªØ li·ªáu...")

        stratify_option = y if y.nunique() > 1 else None
        X_train_full, X_test, y_train_full, y_test = train_test_split(
            X, y, test_size=test_size/100, stratify=stratify_option, random_state=42
        )

        stratify_option = y_train_full if y_train_full.nunique() > 1 else None
        X_train, X_val, y_train, y_val = train_test_split(
            X_train_full, y_train_full, test_size=val_size / (100 - test_size),
            stratify=stratify_option, random_state=42
        )

        # L∆∞u v√†o session_state
        st.session_state.X_train = X_train
        st.session_state.X_test = X_test
        st.session_state.y_train = y_train
        st.session_state.y_test = y_test
        st.session_state.y = y
        st.session_state.X_train_shape = X_train.shape[0]
        st.session_state.X_val_shape = X_val.shape[0]
        st.session_state.X_test_shape = X_test.shape[0]
        summary_df = pd.DataFrame({
            "T·∫≠p d·ªØ li·ªáu": ["Train", "Validation", "Test"],
            "S·ªë l∆∞·ª£ng m·∫´u": [X_train.shape[0], X_val.shape[0], X_test.shape[0]]
        })
        st.table(summary_df)

        # **Log d·ªØ li·ªáu v√†o MLflow**
        

       
def xu_ly_gia_tri_thieu(df):
    st.subheader("‚ö° X·ª≠ l√Ω gi√° tr·ªã thi·∫øu")

    if "df" not in st.session_state:
        st.session_state.df = df.copy()

    df = st.session_state.df

    # T√¨m c·ªôt c√≥ gi√° tr·ªã thi·∫øu
    missing_cols = df.columns[df.isnull().any()].tolist()
    if not missing_cols:
        st.success("‚úÖ D·ªØ li·ªáu kh√¥ng c√≥ gi√° tr·ªã thi·∫øu!")
        return df

    selected_col = st.selectbox("üìå Ch·ªçn c·ªôt ch·ª©a gi√° tr·ªã thi·∫øu:", missing_cols)
    method = st.radio("üîß Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω:", ["Thay th·∫ø b·∫±ng Mean", "Thay th·∫ø b·∫±ng Median", "X√≥a gi√° tr·ªã thi·∫øu"])
    

    if df[selected_col].dtype == 'object' and method in ("Thay th·∫ø b·∫±ng Mean"):
        pass  # Kh√¥ng hi·ªÉn th·ªã c·∫£nh b√°o n·ªØa

    if df[selected_col].dtype == 'object' and method in ["Thay th·∫ø b·∫±ng Median"]:
        pass  # Kh√¥ng hi·ªÉn th·ªã c·∫£nh b√°o n·ªØa
        
        
        
    if st.button("üöÄ X·ª≠ l√Ω gi√° tr·ªã thi·∫øu"):
        if df[selected_col].dtype == 'object':
            

            if method == "Thay th·∫ø b·∫±ng Mean":
                unique_values = df[selected_col].dropna().unique()
                encoding_map = {val: idx for idx, val in enumerate(unique_values)}
                df[selected_col] = df[selected_col].map(encoding_map)
                
                df[selected_col] = df[selected_col].fillna(df[selected_col].mean())
            elif method == "Thay th·∫ø b·∫±ng Median":
                
                unique_values = df[selected_col].dropna().unique()
                encoding_map = {val: idx for idx, val in enumerate(unique_values)}
                df[selected_col] = df[selected_col].map(encoding_map)
            
                df[selected_col] = df[selected_col].fillna(df[selected_col].median())
            elif method == "X√≥a gi√° tr·ªã thi·∫øu":
                df = df.dropna(subset=[selected_col])
        else:
            if method == "Thay th·∫ø b·∫±ng Mean":
                df[selected_col] = df[selected_col].fillna(df[selected_col].mean())
            elif method == "Thay th·∫ø b·∫±ng Median":
                df[selected_col] = df[selected_col].fillna(df[selected_col].median())
            elif method == "X√≥a gi√° tr·ªã thi·∫øu":
                df = df.dropna(subset=[selected_col])
    
        st.session_state.df = df
        st.success(f"‚úÖ ƒê√£ x·ª≠ l√Ω gi√° tr·ªã thi·∫øu trong c·ªôt `{selected_col}`")

    st.dataframe(df.head())
    return df





import pandas as pd
import streamlit as st



def chuyen_doi_kieu_du_lieu(df):
    categorical_cols = df.select_dtypes(include=['object']).columns.tolist()

    if not categorical_cols:
        st.success("‚úÖ Kh√¥ng c√≥ c·ªôt d·∫°ng chu·ªói c·∫ßn chuy·ªÉn ƒë·ªïi!")
        return df

    selected_col = st.selectbox("üìå Ch·ªçn c·ªôt ƒë·ªÉ chuy·ªÉn ƒë·ªïi:", categorical_cols)
    unique_values = df[selected_col].unique()

    if "text_inputs" not in st.session_state:
        st.session_state.text_inputs = {}

    if "mapping_dicts" not in st.session_state:
        st.session_state.mapping_dicts = []

    mapping_dict = {}
    input_values = []
    has_duplicate = False
    has_empty = False  # Ki·ªÉm tra n·∫øu c√≥ √¥ tr·ªëng

    if len(unique_values) < 5:
        for val in unique_values:
            key = f"{selected_col}_{val}"
            if key not in st.session_state.text_inputs:
                st.session_state.text_inputs[key] = ""

            new_val = st.text_input(f"üîÑ Nh·∫≠p gi√° tr·ªã thay th·∫ø cho `{val}`:", 
                                    key=key, 
                                    value=st.session_state.text_inputs[key])

            st.session_state.text_inputs[key] = new_val
            input_values.append(new_val)

            mapping_dict[val] = new_val

        # Ki·ªÉm tra √¥ tr·ªëng
        if "" in input_values:
            has_empty = True

        # Ki·ªÉm tra tr√πng l·∫∑p
        duplicate_values = [val for val in input_values if input_values.count(val) > 1 and val != ""]
        if duplicate_values:
            has_duplicate = True
            st.warning(f"‚ö† Gi√° tr·ªã `{', '.join(set(duplicate_values))}` ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng nhi·ªÅu l·∫ßn. Vui l√≤ng ch·ªçn s·ªë kh√°c!")

        # N√∫t b·ªã m·ªù n·∫øu c√≥ tr√πng ho·∫∑c ch∆∞a nh·∫≠p ƒë·ªß gi√° tr·ªã
        btn_disabled = has_duplicate or has_empty

        if st.button("üöÄ Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu", disabled=btn_disabled):
            column_info = {"column_name": selected_col, "mapping_dict": mapping_dict}
            st.session_state.mapping_dicts.append(column_info)

            df[selected_col] = df[selected_col].map(lambda x: mapping_dict.get(x, x))
            df[selected_col] = pd.to_numeric(df[selected_col], errors='coerce')

            st.session_state.text_inputs.clear()
            st.session_state.df = df
            st.success(f"‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi c·ªôt `{selected_col}`")

    st.dataframe(df.head())
    return df








from sklearn.preprocessing import StandardScaler, MinMaxScaler

def chuan_hoa_du_lieu(df):
    st.subheader("üìä Chu·∫©n h√≥a d·ªØ li·ªáu")
 
    numerical_cols = df.select_dtypes(include=['number']).columns.tolist()
  
    binary_cols = [col for col in numerical_cols if df[col].dropna().isin([0, 1]).all()]
  
    cols_to_scale = list(set(numerical_cols) - set(binary_cols))
 
    if not cols_to_scale:
        st.success("‚úÖ Kh√¥ng c√≥ thu·ªôc t√≠nh d·∫°ng s·ªë c·∫ßn chu·∫©n h√≥a!")
        return df
 
    if st.button("üöÄ Th·ª±c hi·ªán Chu·∫©n h√≥a"):
        scaler = StandardScaler()
        df[cols_to_scale] = scaler.fit_transform(df[cols_to_scale])
        st.success(f"‚úÖ ƒê√£ chu·∫©n h√≥a c√°c c·ªôt s·ªë b·∫±ng StandardScaler: {', '.join(cols_to_scale)}")
     
   
        st.session_state.df = df
   
        st.info(f"üö´ Gi·ªØ nguy√™n c√°c c·ªôt nh·ªã ph√¢n: {', '.join(binary_cols) if binary_cols else 'Kh√¥ng c√≥'}")
        st.dataframe(df.head())
   
    return df

def hien_thi_ly_thuyet(df):
    st.subheader("üìå 10 d√≤ng ƒë·∫ßu c·ªßa d·ªØ li·ªáu g·ªëc")
    st.write(df.head(10))

                # Ki·ªÉm tra l·ªói d·ªØ li·ªáu
    st.subheader("üö® Ki·ªÉm tra l·ªói d·ªØ li·ªáu")

                # Ki·ªÉm tra gi√° tr·ªã thi·∫øu
    missing_values = df.isnull().sum()

                # Ki·ªÉm tra d·ªØ li·ªáu tr√πng l·∫∑p
    duplicate_count = df.duplicated().sum()

                
                
                # Ki·ªÉm tra gi√° tr·ªã qu√° l·ªõn (outlier) b·∫±ng Z-score
    outlier_count = {
        col: (abs(zscore(df[col], nan_policy='omit')) > 3).sum()
        for col in df.select_dtypes(include=['number']).columns
    }

                # T·∫°o b√°o c√°o l·ªói
    error_report = pd.DataFrame({
        'C·ªôt': df.columns,
        'Gi√° tr·ªã thi·∫øu': missing_values,
        'Outlier': [outlier_count.get(col, 0) for col in df.columns]
    })

                # Hi·ªÉn th·ªã b√°o c√°o l·ªói
    st.table(error_report)

                # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng d·ªØ li·ªáu tr√πng l·∫∑p
    st.write(f"üîÅ **S·ªë l∆∞·ª£ng d√≤ng b·ªã tr√πng l·∫∑p:** {duplicate_count}")            
   
    
    st.title("üîç Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu")

    # Hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc
    
    st.header("‚öôÔ∏è C√°c b∆∞·ªõc ch√≠nh trong ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu")
    st.subheader("1Ô∏è‚É£ Lo·∫°i b·ªè c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt")
    st.write("""
        M·ªôt s·ªë c·ªôt trong d·ªØ li·ªáu c√≥ th·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn k·∫øt qu·∫£ d·ª± ƒëo√°n ho·∫∑c ch·ª©a qu√° nhi·ªÅu gi√° tr·ªã thi·∫øu. Ch√∫ng ta s·∫Ω lo·∫°i b·ªè c√°c c·ªôt nh∆∞:
        """)
    df=drop(df)
    
    st.subheader("2Ô∏è‚É£ X·ª≠ l√Ω gi√° tr·ªã thi·∫øu")
    st.write("""
        D·ªØ li·ªáu th·ª±c t·∫ø th∆∞·ªùng c√≥ gi√° tr·ªã b·ªã thi·∫øu. Ta c·∫ßn x·ª≠ l√Ω nh∆∞ ƒëi·ªÅn v√†o b·∫±ng trung b√¨nh ho·∫∑c trung v·ªã c√≥ th·ªÉ x√≥a n·∫øu s·ªë d√≤ng d·ªØ li·ªáu thi·∫øu √≠t ,ƒë·ªÉ tr√°nh ·∫£nh h∆∞·ªüng ƒë·∫øn m√¥ h√¨nh.
        """)
    df=xu_ly_gia_tri_thieu(df)

    st.subheader("3Ô∏è‚É£ Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu")
    st.write("""
        Trong d·ªØ li·ªáu, c√≥ m·ªôt s·ªë c·ªôt ch·ª©a gi√° tr·ªã d·∫°ng ch·ªØ (category). Ta c·∫ßn chuy·ªÉn ƒë·ªïi th√†nh d·∫°ng s·ªë ƒë·ªÉ m√¥ h√¨nh c√≥ th·ªÉ x·ª≠ l√Ω.
        - **C·ªôt "Sex"**: Chuy·ªÉn th√†nh 1 (male), 0 (female).
        - **C·ªôt "Embarked"**:   Chuy·ªÉn th√†nh 1 (Q), 2 (S), 3 (C).
        """)

    df=chuyen_doi_kieu_du_lieu(df)
    
    st.subheader("4Ô∏è‚É£ Chu·∫©n h√≥a d·ªØ li·ªáu s·ªë")
    st.write("""
        C√°c gi√° tr·ªã s·ªë c√≥ th·ªÉ c√≥ kho·∫£ng gi√° tr·ªã kh√°c nhau, l√†m ·∫£nh h∆∞·ªüng ƒë·∫øn m√¥ h√¨nh. Ta s·∫Ω chu·∫©n h√≥a to√†n b·ªô v·ªÅ c√πng m·ªôt thang ƒëo b·∫±ng StandardScaler.
        """)

    
    df=chuan_hoa_du_lieu(df)
    
def chia():
    st.subheader("Chia d·ªØ li·ªáu th√†nh t·∫≠p Train, Validation, v√† Test")
    st.write("""
    ### üìå Chia t·∫≠p d·ªØ li·ªáu
    D·ªØ li·ªáu ƒë∆∞·ª£c chia th√†nh ba ph·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o m√¥ h√¨nh t·ªïng qu√°t t·ªët:
    - **70%**: ƒë·ªÉ train m√¥ h√¨nh.
    - **15%**: ƒë·ªÉ validation, d√πng ƒë·ªÉ ƒëi·ªÅu ch·ªânh tham s·ªë.
    - **15%**: ƒë·ªÉ test, ƒë√°nh gi√° hi·ªáu su·∫•t th·ª±c t·∫ø.

    """)
       
    train_test_size()
    
    


def train_multiple_linear_regression(X_train, y_train, learning_rate=0.001, n_iterations=200):
    """Hu·∫•n luy·ªán h·ªìi quy tuy·∫øn t√≠nh b·ªôi b·∫±ng Gradient Descent."""
    
    # Chuy·ªÉn ƒë·ªïi X_train, y_train sang NumPy array ƒë·ªÉ tr√°nh l·ªói
    X_train = X_train.to_numpy() if isinstance(X_train, pd.DataFrame) else X_train
    y_train = y_train.to_numpy().reshape(-1, 1) if isinstance(y_train, (pd.Series, pd.DataFrame)) else y_train.reshape(-1, 1)

    # Ki·ªÉm tra NaN ho·∫∑c Inf
    if np.isnan(X_train).any() or np.isnan(y_train).any():
        raise ValueError("D·ªØ li·ªáu ƒë·∫ßu v√†o ch·ª©a gi√° tr·ªã NaN!")
    if np.isinf(X_train).any() or np.isinf(y_train).any():
        raise ValueError("D·ªØ li·ªáu ƒë·∫ßu v√†o ch·ª©a gi√° tr·ªã v√¥ c√πng (Inf)!")

    # Chu·∫©n h√≥a d·ªØ li·ªáu ƒë·ªÉ tr√°nh tr√†n s·ªë
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)

    # L·∫•y s·ªë l∆∞·ª£ng m·∫´u (m) v√† s·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng (n)
    m, n = X_train.shape
    #st.write(f"S·ªë l∆∞·ª£ng m·∫´u (m): {m}, S·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng (n): {n}")

    # Th√™m c·ªôt bias (x0 = 1) v√†o X_train
    X_b = np.c_[np.ones((m, 1)), X_train]
    #st.write(f"K√≠ch th∆∞·ªõc ma tr·∫≠n X_b: {X_b.shape}")

    # Kh·ªüi t·∫°o tr·ªçng s·ªë ng·∫´u nhi√™n nh·ªè
    w = np.random.randn(X_b.shape[1], 1) * 0.01  
    #st.write(f"Tr·ªçng s·ªë ban ƒë·∫ßu: {w.flatten()}")

    # Gradient Descent
    for iteration in range(n_iterations):
        gradients = (2/m) * X_b.T.dot(X_b.dot(w) - y_train)

        # Ki·ªÉm tra xem gradients c√≥ NaN kh√¥ng
        # st.write(gradients)
        if np.isnan(gradients).any():
            raise ValueError("Gradient ch·ª©a gi√° tr·ªã NaN! H√£y ki·ªÉm tra l·∫°i d·ªØ li·ªáu ho·∫∑c learning rate.")

        w -= learning_rate * gradients

    #st.success("‚úÖ Hu·∫•n luy·ªán ho√†n t·∫•t!")
    #st.write(f"Tr·ªçng s·ªë cu·ªëi c√πng: {w.flatten()}")
    return w
def train_polynomial_regression(X_train, y_train, degree=2, learning_rate=0.001, n_iterations=500):
    """Hu·∫•n luy·ªán h·ªìi quy ƒëa th·ª©c **kh√¥ng c√≥ t∆∞∆°ng t√°c** b·∫±ng Gradient Descent."""

    # Chuy·ªÉn d·ªØ li·ªáu sang NumPy array n·∫øu l√† pandas DataFrame/Series
    X_train = X_train.to_numpy() if isinstance(X_train, pd.DataFrame) else X_train
    y_train = y_train.to_numpy().reshape(-1, 1) if isinstance(y_train, (pd.Series, pd.DataFrame)) else y_train.reshape(-1, 1)

    # T·∫°o ƒë·∫∑c tr∆∞ng ƒëa th·ª©c **ch·ªâ th√™m b·∫≠c cao, kh√¥ng c√≥ t∆∞∆°ng t√°c**
    X_poly = np.hstack([X_train] + [X_train**d for d in range(2, degree + 1)])
    # Chu·∫©n h√≥a d·ªØ li·ªáu ƒë·ªÉ tr√°nh tr√†n s·ªë
    scaler = StandardScaler()
    X_poly = scaler.fit_transform(X_poly)

    # L·∫•y s·ªë l∆∞·ª£ng m·∫´u (m) v√† s·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng (n)
    m, n = X_poly.shape
    print(f"S·ªë l∆∞·ª£ng m·∫´u (m): {m}, S·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng (n): {n}")

    # Th√™m c·ªôt bias (x0 = 1)
    X_b = np.c_[np.ones((m, 1)), X_poly]
    print(f"K√≠ch th∆∞·ªõc ma tr·∫≠n X_b: {X_b.shape}")

    # Kh·ªüi t·∫°o tr·ªçng s·ªë ng·∫´u nhi√™n nh·ªè
    w = np.random.randn(X_b.shape[1], 1) * 0.01  
    print(f"Tr·ªçng s·ªë ban ƒë·∫ßu: {w.flatten()}")

    # Gradient Descent
    for iteration in range(n_iterations):
        gradients = (2/m) * X_b.T.dot(X_b.dot(w) - y_train)

        # Ki·ªÉm tra n·∫øu gradient c√≥ gi√° tr·ªã NaN
        if np.isnan(gradients).any():
            raise ValueError("Gradient ch·ª©a gi√° tr·ªã NaN! H√£y ki·ªÉm tra l·∫°i d·ªØ li·ªáu ho·∫∑c learning rate.")

        w -= learning_rate * gradients

    print("‚úÖ Hu·∫•n luy·ªán ho√†n t·∫•t!")
    print(f"Tr·ªçng s·ªë cu·ªëi c√πng: {w.flatten()}")
    
    return w



# H√†m ch·ªçn m√¥ h√¨nh
def chon_mo_hinh():
    st.subheader("üîç Ch·ªçn m√¥ h√¨nh h·ªìi quy")
    
    model_type_V = st.radio("Ch·ªçn lo·∫°i m√¥ h√¨nh:", ["Multiple Linear Regression", "Polynomial Regression"])
    model_type = "linear" if model_type_V == "Multiple Linear Regression" else "polynomial"
    
    n_folds = st.slider("Ch·ªçn s·ªë folds (KFold Cross-Validation):", min_value=2, max_value=10, value=5)
    learning_rate = st.slider("Ch·ªçn t·ªëc ƒë·ªô h·ªçc (learning rate):", 
                          min_value=1e-6, max_value=0.1, value=0.01, step=1e-6, format="%.6f")

    degree = 2
    if model_type == "polynomial":
        degree = st.slider("Ch·ªçn b·∫≠c ƒëa th·ª©c:", min_value=2, max_value=5, value=2)

    fold_mse = []
    scaler = StandardScaler()
    kf = KFold(n_splits=n_folds, shuffle=True, random_state=42)

    if "X_train" not in st.session_state or st.session_state.X_train is None:
        st.warning("‚ö†Ô∏è Vui l√≤ng chia d·ªØ li·ªáu tr∆∞·ªõc khi hu·∫•n luy·ªán m√¥ h√¨nh!")
        return None, None, None

    X_train, X_test = st.session_state.X_train, st.session_state.X_test
    y_train, y_test = st.session_state.y_train, st.session_state.y_test
    
    mlflow_input()
    import random
    random_suffix = random.randint(100, 9999)
    run_name = f"Linear_{random_suffix}"
    st.session_state["run_name"] = run_name
    
    if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh"):
        with mlflow.start_run(run_name=f"Train_{st.session_state['run_name']}") as run:
            # Debug: Ki·ªÉm tra run_name ƒë√£ ƒë∆∞·ª£c g√°n ƒë√∫ng ch∆∞a
            st.write(f"Debug: Run Name trong MLflow: {run.info.run_name}")

            # Log c√°c th√¥ng tin c∆° b·∫£n
            df = st.session_state.df
            mlflow.log_param("dataset_shape", df.shape)
            mlflow.log_param("target_column", st.session_state.y.name)
            mlflow.log_param("test_size", st.session_state.X_test_shape)
            mlflow.log_param("validation_size", st.session_state.X_val_shape)
            mlflow.log_param("train_size", st.session_state.X_train_shape)


            dataset_path = "dataset.csv"
            df.to_csv(dataset_path, index=False)
  
            mlflow.log_artifact(dataset_path)

 
            mlflow.log_param("model_type", model_type)
            mlflow.log_param("n_folds", n_folds)
            mlflow.log_param("learning_rate", learning_rate)
            if model_type == "polynomial":
                mlflow.log_param("degree", degree)

            try:
                # Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu c·ªßa X_train v√† y_train tr∆∞·ªõc khi hu·∫•n luy·ªán
                if not np.issubdtype(X_train.to_numpy().dtype, np.number):
                    raise ValueError("X_train ch·ª©a ki·ªÉu d·ªØ li·ªáu kh√¥ng ph·∫£i s·ªë (non-numeric)! Vui l√≤ng chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c·ªôt th√†nh s·ªë.")
                if not np.issubdtype(y_train.to_numpy().dtype, np.number):
                    raise ValueError("y_train ch·ª©a ki·ªÉu d·ªØ li·ªáu kh√¥ng ph·∫£i s·ªë (non-numeric)! Vui l√≤ng chuy·ªÉn ƒë·ªïi th√†nh s·ªë.")

                # Hu·∫•n luy·ªán m√¥ h√¨nh v·ªõi KFold Cross-Validation
                for fold, (train_idx, valid_idx) in enumerate(kf.split(X_train, y_train)):
                    X_train_fold, X_valid = X_train.iloc[train_idx], X_train.iloc[valid_idx]
                    y_train_fold, y_valid = y_train.iloc[train_idx], y_train.iloc[valid_idx]

                    if model_type == "linear":
                        w = train_multiple_linear_regression(X_train_fold, y_train_fold, learning_rate=learning_rate)
                        w = np.array(w).reshape(-1, 1)
                        X_valid_b = np.c_[np.ones((len(X_valid), 1)), X_valid.to_numpy()]
                        y_valid_pred = X_valid_b.dot(w)
                    else:  
                        X_train_fold = scaler.fit_transform(X_train_fold)
                        w = train_polynomial_regression(X_train_fold, y_train_fold, degree, learning_rate=learning_rate)
                        w = np.array(w).reshape(-1, 1)
                        X_valid_scaled = scaler.transform(X_valid.to_numpy())
                        X_valid_poly = np.hstack([X_valid_scaled] + [X_valid_scaled**d for d in range(2, degree + 1)])
                        X_valid_b = np.c_[np.ones((len(X_valid_poly), 1)), X_valid_poly]
                        y_valid_pred = X_valid_b.dot(w)

                    mse = mean_squared_error(y_valid, y_valid_pred)
                    fold_mse.append(mse)
                    mlflow.log_metric(f"mse_fold_{fold+1}", mse)
                    print(f"üìå Fold {fold + 1} - MSE: {mse:.4f}")

                avg_mse = np.mean(fold_mse)

                # Hu·∫•n luy·ªán m√¥ h√¨nh cu·ªëi c√πng tr√™n to√†n b·ªô t·∫≠p train
                if model_type == "linear":
                    final_w = train_multiple_linear_regression(X_train, y_train, learning_rate=learning_rate)
                    st.session_state['linear_model'] = final_w
                    X_test_b = np.c_[np.ones((len(X_test), 1)), X_test.to_numpy()]
                    y_test_pred = X_test_b.dot(final_w)
                else:
                    X_train_scaled = scaler.fit_transform(X_train)
                    final_w = train_polynomial_regression(X_train_scaled, y_train, degree, learning_rate=learning_rate)
                    st.session_state['polynomial_model'] = final_w
                    X_test_scaled = scaler.transform(X_test.to_numpy())
                    X_test_poly = np.hstack([X_test_scaled] + [X_test_scaled**d for d in range(2, degree + 1)])
                    X_test_b = np.c_[np.ones((len(X_test_poly), 1)), X_test_poly]
                    y_test_pred = X_test_b.dot(final_w)

                test_mse = mean_squared_error(y_test, y_test_pred)

                # Log metrics khi th√†nh c√¥ng
                mlflow.log_metric("avg_mse", avg_mse)
                mlflow.log_metric("test_mse", test_mse)

                st.success(f"MSE trung b√¨nh qua c√°c folds: {avg_mse:.4f}")
                st.success(f"MSE tr√™n t·∫≠p test: {test_mse:.4f}")
                st.success(f"‚úÖ ƒê√£ log d·ªØ li·ªáu cho **Train_{st.session_state['run_name']}**!")
                st.markdown(f"### üîó [Truy c·∫≠p MLflow DAGsHub]({st.session_state['mlflow_url']})")

                return final_w, avg_mse, scaler

            except Exception as e:
                error_message = str(e)
                if "ufunc 'isnan' not supported" in error_message:
                    error_message = (
                        "L·ªói: D·ªØ li·ªáu ƒë·∫ßu v√†o (X_train ho·∫∑c y_train) ch·ª©a ki·ªÉu d·ªØ li·ªáu kh√¥ng ph·∫£i s·ªë (non-numeric) "
                        "ho·∫∑c kh√¥ng th·ªÉ √©p ki·ªÉu th√†nh s·ªë. Vui l√≤ng ki·ªÉm tra v√† chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c·ªôt d·ªØ li·ªáu th√†nh ki·ªÉu s·ªë "
                        "(numeric) tr∆∞·ªõc khi hu·∫•n luy·ªán (v√≠ d·ª•: x·ª≠ l√Ω c·ªôt categorical ch∆∞a ƒë∆∞·ª£c m√£ h√≥a ƒë√∫ng c√°ch)."
                    )
                else:
                    error_message = f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"

                mlflow.log_param("status", "failed")
                mlflow.log_metric("avg_mse", -1)
                mlflow.log_metric("test_mse", -1)
                mlflow.log_param("error_message", error_message)

                st.error(f"‚ùå L·ªói khi hu·∫•n luy·ªán m√¥ h√¨nh: {error_message}")
                st.warning(f"‚ö†Ô∏è D·ªØ li·ªáu l·ªói ƒë√£ ƒë∆∞·ª£c log v√†o MLflow v·ªõi run name: **Train_{st.session_state['run_name']}**")
                st.markdown(f"### üîó [Truy c·∫≠p MLflow DAGsHub]({st.session_state['mlflow_url']})")

                return None, None, None

    return None, None, None



import numpy as np
import streamlit as st

import streamlit as st
import numpy as np
from sklearn.preprocessing import StandardScaler

def test():
    # Ki·ªÉm tra xem m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u trong session_state ch∆∞a
    model_type = st.selectbox("Ch·ªçn m√¥ h√¨nh:", ["linear", "polynomial"])

    if model_type == "linear" and "linear_model" in st.session_state:
        model = st.session_state["linear_model"]
    elif model_type == "polynomial" and "polynomial_model" in st.session_state:
        model = st.session_state["polynomial_model"]
    else:
        st.warning("M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán.")
        return

    # Nh·∫≠p c√°c gi√° tr·ªã cho c√°c c·ªôt c·ªßa X_train
    X_train = st.session_state.X_train
    
    st.write(X_train.head()) 
    
    # ƒê·∫£m b·∫£o b·∫°n d√πng session_state
    num_columns = len(X_train.columns)
    column_names = X_train.columns.tolist()

    st.write(f"Nh·∫≠p c√°c gi√° tr·ªã cho {num_columns} c·ªôt c·ªßa X_train:")

    # T·∫°o c√°c tr∆∞·ªùng nh·∫≠p li·ªáu cho t·ª´ng c·ªôt
    X_train_input = []
   
    # Ki·ªÉm tra n·∫øu c√≥ d·ªØ li·ªáu mapping_dicts trong session_state
    if "mapping_dicts" not in st.session_state:
        st.session_state.mapping_dicts = []

    # Duy·ªát qua c√°c c·ªôt v√† ki·ªÉm tra n·∫øu c√≥ th√¥ng tin chuy·ªÉn ƒë·ªïi
    for i, column_name in enumerate(column_names):
        # Ki·ªÉm tra xem c·ªôt c√≥ n·∫±m trong mapping_dicts kh√¥ng
        mapping_dict = None
        for column_info in st.session_state.mapping_dicts:
            if column_info["column_name"] == column_name:
   
                mapping_dict = column_info["mapping_dict"]
  
                break

        if mapping_dict:  # N·∫øu c√≥ mapping_dict, hi·ªÉn th·ªã dropdown v·ªõi c√°c gi√° tr·ªã thay th·∫ø
   
            value = st.selectbox(f"Gi√° tr·ªã c·ªôt {column_name}", options=list(mapping_dict.keys()), key=f"column_{i}")
    
            value = int(mapping_dict[value])
   
        else:  # N·∫øu kh√¥ng c√≥ mapping_dict, y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p s·ªë
            value = st.number_input(f"Gi√° tr·ªã c·ªôt {column_name}", key=f"column_{i}")
   
        X_train_input.append(value)
    
    # Chuy·ªÉn ƒë·ªïi list th√†nh array
    X_train_input = np.array(X_train_input).reshape(1, -1)
    
    # Chu·∫©n h√≥a d·ªØ li·ªáu
    X_train_input_final = X_train_input.copy()  # Sao ch√©p ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng d·ªØ li·ªáu g·ªëc
    scaler = StandardScaler()
  
    for i in range(X_train_input.shape[1]):
        if X_train_input[0, i] != 0 and X_train_input[0, i] != 1:  # N·∫øu gi√° tr·ªã kh√¥ng ph·∫£i 0 ho·∫∑c 1
            X_train_input_final[0, i] = scaler.fit_transform(X_train_input[:, i].reshape(-1, 1)).flatten()
    
  
    #st.write("D·ªØ li·ªáu sau khi x·ª≠ l√Ω:", X_train_input_final)

    if st.button("D·ª± ƒëo√°n"):
        # Th√™m c·ªôt 1 cho intercept (n·∫øu c·∫ßn)
        X_input_b = np.c_[np.ones((X_train_input_final.shape[0], 1)), X_train_input_final]
        
    
        # D·ª± ƒëo√°n v·ªõi m√¥ h√¨nh ƒë√£ l∆∞u
    
        y_pred = X_input_b.dot(model)  # D·ª± ƒëo√°n v·ªõi m√¥ h√¨nh ƒë√£ l∆∞u
        
        # Chuy·ªÉn y_pred th√†nh x√°c su·∫•t b·∫±ng sigmoid (v√¨ ƒë√¢y l√† ph√¢n lo·∫°i nh·ªã ph√¢n)
        y_pred_prob = 1 / (1 + np.exp(-y_pred))  # √Åp d·ª•ng sigmoid ƒë·ªÉ c√≥ gi√° tr·ªã [0, 1]
        y_pred_scalar = y_pred_prob[0, 0]  # L·∫•y gi√° tr·ªã ƒë∆°n t·ª´ m·∫£ng 2D

        # X√°c ƒë·ªãnh nh√£n d·ª± ƒëo√°n
        if y_pred_scalar >= 0.5:
  
            prediction = "S·ªêNG"
   
        else:
            prediction = "CH·∫æT"


        # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n (kh√¥ng hi·ªÉn th·ªã ƒë·ªô tin c·∫≠y)
        st.write(f"**K·∫øt qu·∫£ d·ª± ƒëo√°n:** {prediction}")


        # G·ªçi h√†m hi·ªÉn th·ªã th√¥ng tin experiment (n·∫øu c√≥)
        show_experiment_selector()



def data():
    uploaded_file = st.file_uploader("üìÇ Ch·ªçn file d·ªØ li·ªáu (.csv ho·∫∑c .txt)", type=["csv", "txt"])
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file, delimiter=",")
            st.success("üìÇ File t·∫£i l√™n th√†nh c√¥ng!")

            # Hi·ªÉn th·ªã l√Ω thuy·∫øt v√† x·ª≠ l√Ω d·ªØ li·ªáu
            hien_thi_ly_thuyet(df)
        except Exception as e:
            st.error(f"‚ùå L·ªói : {e}")
            
import streamlit as st
import mlflow
import os

import streamlit as st
import mlflow
import os
import pandas as pd
from datetime import datetime

def show_experiment_selector():
      
    st.markdown("<h1 style='text-align: center; color: #2E86C1;'> MLflow Experiments </h1>", unsafe_allow_html=True)
    
 
    with st.sidebar:
        st.subheader("üîç T·ªïng quan Experiment")
        experiment_name = "Linear_Regression"
        
    
        experiments = mlflow.search_experiments()
        selected_experiment = next((exp for exp in experiments if exp.name == experiment_name), None)

        if not selected_experiment:
            st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y Experiment '{experiment_name}'!", icon="üö´")
            return

        st.markdown(f"**T√™n Experiment:** `{experiment_name}`")
        st.markdown(f"**ID:** `{selected_experiment.experiment_id}`")
        st.markdown(f"**Tr·∫°ng th√°i:** {'üü¢ Active' if selected_experiment.lifecycle_stage == 'active' else 'üî¥ Deleted'}")
        st.markdown(f"**Artifact Location:** `{selected_experiment.artifact_location}`")


        if "run_name" in st.session_state:
            st.markdown(f"**Run hi·ªán t·∫°i:** `{st.session_state['run_name']}`")
        else:
            st.warning("‚ö† Ch∆∞a c√≥ run_name n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p.", icon="‚ÑπÔ∏è")

    st.markdown("---")
    runs = mlflow.search_runs(experiment_ids=[selected_experiment.experiment_id])

    if runs.empty:
        st.warning("‚ö† Kh√¥ng c√≥ runs n√†o trong experiment n√†y!", icon="üö®")
        return

   
    with st.expander("üèÉ‚Äç‚ôÇÔ∏è Danh s√°ch Runs", expanded=True):
        st.write("Ch·ªçn m·ªôt Run ƒë·ªÉ xem chi ti·∫øt:")
        run_info = []
        used_names = set()

        for _, run in runs.iterrows():
            run_id = run["run_id"]
            run_data = mlflow.get_run(run_id)
            # L·∫•y run_name t·ª´ run.info.run_name
            run_name = run_data.info.run_name if run_data.info.run_name else f"Run_{run_id[:8]}"
            
            run_name_base = run_name
            counter = 1
            while run_name in used_names:
                run_name = f"{run_name_base}_{counter}"
                counter += 1
            used_names.add(run_name)
            run_info.append((run_name, run_id))


        run_name_to_id = dict(run_info)
        run_names = list(run_name_to_id.keys())


        selected_run_name = st.selectbox("üîç Ch·ªçn Run:", run_names, key="run_selector", help="Ch·ªçn ƒë·ªÉ xem th√¥ng tin chi ti·∫øt")

 
    selected_run_id = run_name_to_id[selected_run_name]
    selected_run = mlflow.get_run(selected_run_id)

    if selected_run:
        st.markdown(f"<h3 style='color: #28B463;'>üìå Chi ti·∫øt Run: {selected_run_name}</h3>", unsafe_allow_html=True)


        col1, col2 = st.columns([1, 2])

        with col1:
            st.write("#### ‚ÑπÔ∏è Th√¥ng tin c∆° b·∫£n")
            st.info(f"**Run Name:** {selected_run_name}")
            st.info(f"**Run ID:** `{selected_run_id}`")
            st.info(f"**Tr·∫°ng th√°i:** {selected_run.info.status}")
            start_time_ms = selected_run.info.start_time
            if start_time_ms:
                start_time = datetime.fromtimestamp(start_time_ms / 1000).strftime("%Y-%m-%d %H:%M:%S")
            else:
                start_time = "Kh√¥ng c√≥ th√¥ng tin"
            st.info(f"**Th·ªùi gian ch·∫°y:** {start_time}")

        with col2:
  
            params = selected_run.data.params
            if params:
                st.write("#### ‚öôÔ∏è Parameters")
                with st.container(height=200):
                    st.json(params)


            metrics = selected_run.data.metrics
            if metrics:
                st.write("#### üìä Metrics")
                with st.container(height=200):
                    st.json(metrics)

    else:
        st.warning("‚ö† Kh√¥ng t√¨m th·∫•y th√¥ng tin cho Run n√†y!", icon="üö®")


    st.markdown("---")
    st.markdown("<p style='text-align: center; color: #888;'>Powered by Streamlit & MLflow</p>", unsafe_allow_html=True)



def chon():
    try:
                
        final_w, avg_mse, scaler = chon_mo_hinh()
    except Exception as e:
        st.error(f"L·ªói x·∫£y ra: {e}")
def main():
    st.title("Assignment - Linear Regression")
    # mlflow_input()
    tab1, tab2, tab3 = st.tabs([" Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu"," Hu·∫•n luy·ªán", " D·ª± ƒëo√°n"])
    with tab1:
        data()
    with tab2:
        chia()
        chon()
    with tab3:
        test()


    
            
            
            

        
if __name__ == "__main__":
    main()
    
        


        


            
  
